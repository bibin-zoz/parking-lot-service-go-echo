// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/interface/park_vehicle.go

// Package mock is a generated GoMock package.
package mock

import (
	models "parking-lot-service/internal/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockParkVehicleUseCase is a mock of ParkVehicleUseCase interface.
type MockParkVehicleUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockParkVehicleUseCaseMockRecorder
}

// MockParkVehicleUseCaseMockRecorder is the mock recorder for MockParkVehicleUseCase.
type MockParkVehicleUseCaseMockRecorder struct {
	mock *MockParkVehicleUseCase
}

// NewMockParkVehicleUseCase creates a new mock instance.
func NewMockParkVehicleUseCase(ctrl *gomock.Controller) *MockParkVehicleUseCase {
	mock := &MockParkVehicleUseCase{ctrl: ctrl}
	mock.recorder = &MockParkVehicleUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParkVehicleUseCase) EXPECT() *MockParkVehicleUseCaseMockRecorder {
	return m.recorder
}

// ParkExit mocks base method.
func (m *MockParkVehicleUseCase) ParkExit(ticketID int, exitTime time.Time) (*models.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParkExit", ticketID, exitTime)
	ret0, _ := ret[0].(*models.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParkExit indicates an expected call of ParkExit.
func (mr *MockParkVehicleUseCaseMockRecorder) ParkExit(ticketID, exitTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParkExit", reflect.TypeOf((*MockParkVehicleUseCase)(nil).ParkExit), ticketID, exitTime)
}

// ParkVehicle mocks base method.
func (m *MockParkVehicleUseCase) ParkVehicle(parkReq models.ParkReq) (*models.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParkVehicle", parkReq)
	ret0, _ := ret[0].(*models.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParkVehicle indicates an expected call of ParkVehicle.
func (mr *MockParkVehicleUseCaseMockRecorder) ParkVehicle(parkReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParkVehicle", reflect.TypeOf((*MockParkVehicleUseCase)(nil).ParkVehicle), parkReq)
}
